# =======================================
FROM registry.access.redhat.com/ubi9/nodejs-22-minimal AS distbase
# =======================================

USER root

# Install ca-certificates so that Sentry can upload source maps
RUN microdnf update -y && microdnf install -y ca-certificates gzip && microdnf clean all

# Install yarn
RUN curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo
RUN microdnf -y install yarn

# =============================
FROM distbase AS appbase
# =============================

USER root

# Build ARGS
ARG PROJECT
ARG FOLDER

# Yarn
ENV YARN_VERSION 1.22.21

RUN yarn policies set-version "$YARN_VERSION"
RUN yarn config set ignore-engines true

WORKDIR /app

RUN groupadd --gid 1000 default
RUN useradd --uid 1000 --gid default --create-home --shell /bin/bash default

# Install dependencies
COPY --chown=default:default package.json yarn.lock ./
COPY --chown=default:default $PROJECT/$FOLDER/package.json $PROJECT/$FOLDER/package.json
COPY --chown=default:default $PROJECT/shared/package.json* $PROJECT/shared/package.json
COPY --chown=default:default shared/package.json shared/package.json
RUN --mount=type=cache,target="$PWD/.yarn_cache",sharing=locked YARN_CACHE_FOLDER="$PWD"/.yarn_cache yarn --frozen-lockfile --check-files --network-timeout 600000

# Ensure the project's .next directory exist and is accessible
# so that the express server can access the files
RUN mkdir -p $PROJECT/$FOLDER/.next \
    && chown -R default:default $PROJECT/$FOLDER/.next \
    && chmod -R u=rwx,go=rx $PROJECT/$FOLDER/.next

# =============================
FROM appbase AS development
# =============================

# Create the directory with correct permissions for VSCode server
RUN mkdir -p /opt/app-root/src/.vscode-server && chown -R default:default /opt/app-root/src

# Copy all files
COPY --chown=default:default . .

# Use non-root user
USER default

# Set V8 max heap size to 2GB (default is 512MB)
# This prevents Docker Compose from crashing due to out of memory errors
ENV NODE_OPTIONS="--max_old_space_size=2048"

ARG PROJECT
ARG FOLDER
# Enable hot reload by default by polling for file changes.
#
# NOTE: Can be disabled by setting WATCHPACK_POLLING=false
#       if hot reload works on your system without polling to save CPU time.
ARG WATCHPACK_POLLING=true
ENV WATCHPACK_POLLING=${WATCHPACK_POLLING}

# Use non-root user
USER default
WORKDIR /app

# Copy all files
COPY --chown=default:default . .

ENV NEXT_TELEMETRY_DISABLED 1
ENV TURBOPACK 1

# Bake package.json start command into the image
ENV DEV_START "yarn --cwd $PROJECT/$FOLDER dev"
CMD ["sh", "-c", "${DEV_START}"]
